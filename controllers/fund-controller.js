const prisma = require("../configs/prisma"); // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô Prisma ORM
const createError = require("../utils/createError");
const fundController = {};

fundController.getAllFundNames = async (req, res, next) => {
  //‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Å‡∏≠‡∏á‡∏ó‡∏∏‡∏ô (classAbbrName) ‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å
  // üîπ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ classAbbrName ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡πÉ‡∏ô query ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö { result: [] }
  // üîπ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å classAbbr ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Prisma ORM ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£

  try {
    const { classAbbrName } = req.query;
    // console.log(classAbbrName)

    if (!classAbbrName) {
      return res.json({ result: [] });
    }

    let result = await prisma.classAbbr.findMany({
      where: {
        classAbbrName: { contains: classAbbrName },
      },

      select: {
        classAbbrName: true,
      },
      take: 10,
    });

    res.json({ result });
  } catch (error) {
    next(error);
  }
};

fundController.getCompany = async (req, res, next) => {
  try {
    const result = await prisma.company.findMany({
      select: {
        id: true,
        companyName: true,
      },
    });
    res.json({ result });
  } catch (error) {
    next(error);
  }
};

fundController.getRiskLevel = async (req, res, next) => {
  try {
    const result = await prisma.fundRiskLevel.findMany({
      select: {
        id: true,
        fundRiskLevelName: true,
      },
    });
    res.json({ result });
  } catch (error) {
    next(error);
  }
};

fundController.getFundGroup = async (req, res, next) => {
  try {
    //   const result = await prisma.$queryRaw`
    //   SELECT DISTINCT fund_compare_group as fundCompareGroup
    //   FROM funds;
    // `;

    const rawResult = await prisma.funds.findMany({
      select: {
        fundCompareGroup: true,
      },
    });

    const result = [...new Set(rawResult.map(item => item.fundCompareGroup))];
    // ['üá∫üá∏', 'üáØüáµ', 'üáπüá≠']

    if (result.length === 0) {
      return res.status(404).json({ message: "No fund groups found" });
    }

    res.json({ result });
  } catch (error) {
    next(error);
  }
};

fundController.getGlobalInv = async (req, res, next) => {
  try {
    //   const result = await prisma.$queryRaw`
    //   SELECT DISTINCT invest_country_flag as investCountryFlag
    //   FROM funds;
    // `;

    const rawResult = await prisma.funds.findMany({
      select: {
        investCountryFlag: true,
      },
    });

    const result = [...new Set(rawResult.map(item => item.investCountryFlag))];
    // ['üá∫üá∏', 'üáØüáµ', 'üáπüá≠']

    if (result.length === 0) {
      return res.status(404).json({ message: "No data found" });
    }

    res.json({ result });
  } catch (error) {
    next(error);
  }
};

// {{url}}/funds/filter?classAbbrName=&companyId=&fundCompareGroup=&fundRiskLevelId=&investCountryFlag=&dividendPolicy=N&page=2
fundController.getFunds = async (req, res, next) => {
  // üîπ ‡∏£‡∏±‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å query ‡πÄ‡∏ä‡πà‡∏ô
  // classAbbrName ‚Üí ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Å‡∏≠‡∏á‡∏ó‡∏∏‡∏ô
  // companyId ‚Üí ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏≠‡∏á‡∏ó‡∏∏‡∏ô‡∏ï‡∏≤‡∏°‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
  // fundCompareGroup ‚Üí ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏≠‡∏á‡∏ó‡∏∏‡∏ô‡∏ï‡∏≤‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
  // fundRiskLevelId ‚Üí ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏≠‡∏á‡∏ó‡∏∏‡∏ô‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
  // investCountryFlag ‚Üí ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏≠‡∏á‡∏ó‡∏∏‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∏‡∏ô
  // dividendPolicy ‚Üí ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏≠‡∏á‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏õ‡∏±‡∏ô‡∏ú‡∏•
  // page, limit ‚Üí ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤
  // üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÉ‡∏´‡πâ‡πÇ‡∏¢‡∏ô error
  // üîπ ‡πÉ‡∏ä‡πâ Prisma ORM ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
  // üîπ ‡πÉ‡∏ä‡πâ .include ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô
  // funds ‚Üí ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Å‡∏≠‡∏á‡∏ó‡∏∏‡∏ô
  // FeeDetial ‚Üí ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°
  // fundPerformanceRisk ‚Üí ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
  // üîπ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏Å‡∏≠‡∏á‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç

  try {
    const {
      classAbbrName,
      companyId,
      fundCompareGroup,
      fundRiskLevelId,
      investCountryFlag,
      dividendPolicy,
      page = "1",
      limit = "10",
    } = req.query;

    // console.log(typeof classAbbrName)
    // filter by performance , fundrisklevel, fee

    let result = [];
    // validate
    if (isNaN(Number(page)) || isNaN(Number(limit))) {
      return createError(400, "invalid type for page or limit");
    }

    const skip = (Number(page) - 1) * Number(limit);

    // filter from db
    // if no data input >> show all funds

    result = await prisma.classAbbr.findMany({
      where: {
        AND: {
          classAbbrName: !!classAbbrName
            ? {
                contains: classAbbrName,
              }
            : {},
          dividendPolicy: !!dividendPolicy ? dividendPolicy : {},
        },
        funds: {
          AND: {
            fundCompareGroup: !!fundCompareGroup ? fundCompareGroup : {},
            fundRiskLevelId: !!Number(fundRiskLevelId)
              ? Number(fundRiskLevelId)
              : {},
            investCountryFlag: !!investCountryFlag ? investCountryFlag : {},
          },
          companies: {
            id: !!Number(companyId) ? Number(companyId) : {},
          },
        },
      },
      include: {
        funds: {
          include: {
            companies: {
              select: {
                companyName: true,
              },
            },
          },
        },
        FeeDetial: {
          where: {
            feeType: "‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
          },
          select: {
            feeType: true,
            rate: true,
            rateUnit: true,
            actualValue: true,
          },
        },
        fundPerformanceRisk: true,
      },
      skip: skip,
      take: Number(limit),
      orderBy: {},
    });

    countAllResult = await prisma.classAbbr.count({
      where: {
        AND: {
          classAbbrName: !!classAbbrName
            ? {
                contains: classAbbrName,
              }
            : {},
          dividendPolicy: !!dividendPolicy ? dividendPolicy : {},
        },
        funds: {
          AND: {
            fundCompareGroup: !!fundCompareGroup ? fundCompareGroup : {},
            fundRiskLevelId: !!Number(fundRiskLevelId)
              ? Number(fundRiskLevelId)
              : {},
            investCountryFlag: !!investCountryFlag ? investCountryFlag : {},
          },
          companies: {
            id: !!Number(companyId) ? Number(companyId) : {},
          },
        },
      },
    });

    // console.log(result.length);

    res.json({
      count: countAllResult,
      message: result,
    });
  } catch (error) {
    next(error);
  }
};

fundController.sortFunds = async (req, res, next) => {
  // üîπ ‡∏£‡∏±‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô getFunds

  // üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö ‡πÄ‡∏ä‡πà‡∏ô
  // sortBy ‚Üí ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡πÑ‡∏´‡∏ô (fee ‡∏´‡∏£‡∏∑‡∏≠ return)
  // performanceType, performancePeriod ‚Üí ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô

  // üîπ ‡∏ñ‡πâ‡∏≤ sortBy === "fee"
  // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏≠‡∏á‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°
  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡πÑ‡∏õ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
  // ‡πÉ‡∏ä‡πâ .slice(skip, skip + Number(limit)) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å

  // üîπ ‡∏ñ‡πâ‡∏≤ sortBy === "return"
  // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô
  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£

  try {
    // filtered variable
    const {
      classAbbrName,
      companyId,
      fundCompareGroup,
      fundRiskLevelId,
      investCountryFlag,
      dividendPolicy,
      page = "1",
      limit = "10",
      sortBy,
      performanceType,
      performancePeriod,
    } = req.query;

    // validate
    if (sortBy !== "fee") {
      if (!sortBy || !performanceType || !performancePeriod) {
        return createError(400, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
      }
    }

    if (typeof sortBy !== "string") {
      return createError(400, "‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    }

    if (performanceType && performancePeriod) {
      if (
        typeof performanceType !== "string" ||
        typeof performancePeriod !== "string"
      ) {
        return createError(400, "‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
      }
    }

    let result = [];
    // validate
    if (isNaN(Number(page)) || isNaN(Number(limit))) {
      return createError(400, "invalid type for page or limit");
    }

    const skip = (Number(page) - 1) * Number(limit);

    // filter from db
    // if no data input >> show all funds

    result = await prisma.classAbbr.findMany({
      where: {
        AND: {
          classAbbrName: !!classAbbrName
            ? {
                contains: classAbbrName,
              }
            : {},
          dividendPolicy: !!dividendPolicy ? dividendPolicy : {},
        },
        funds: {
          AND: {
            fundCompareGroup: !!fundCompareGroup ? fundCompareGroup : {},
            fundRiskLevelId: !!Number(fundRiskLevelId)
              ? Number(fundRiskLevelId)
              : {},
            investCountryFlag: !!investCountryFlag ? investCountryFlag : {},
          },
          companies: {
            id: !!Number(companyId) ? Number(companyId) : {},
          },
        },
      },
      include: {
        funds: {
          include: {
            companies: {
              select: {
                companyName: true,
              },
            },
          },
        },
        FeeDetial: {
          where: {
            feeType: "‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
          },
          select: {
            feeType: true,
            rate: true,
            rateUnit: true,
            actualValue: true,
          },
        },
        fundPerformanceRisk: true,
      },
    });

    countAllResult = await prisma.classAbbr.count({
      where: {
        AND: {
          classAbbrName: !!classAbbrName
            ? {
                contains: classAbbrName,
              }
            : {},
          dividendPolicy: !!dividendPolicy ? dividendPolicy : {},
        },
        funds: {
          AND: {
            fundCompareGroup: !!fundCompareGroup ? fundCompareGroup : {},
            fundRiskLevelId: !!Number(fundRiskLevelId)
              ? Number(fundRiskLevelId)
              : {},
            investCountryFlag: !!investCountryFlag ? investCountryFlag : {},
          },
          companies: {
            id: !!Number(companyId) ? Number(companyId) : {},
          },
        },
      },
    });

    let sortResult = [];
    let finalResult = [];

    // sort by fee
    if (sortBy === "fee") {
      sortResult = result
        .filter((el) => {
          // filter ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ fee ‡∏ô‡∏µ‡πâ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤
          let actualFee = el.FeeDetial[0]?.actualValue;
          return !(!actualFee && actualFee !== 0);
        })
        .sort((a, b) => {
          // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å fee ‡∏ï‡πà‡∏≥‡πÑ‡∏õ‡∏™‡∏π‡∏á
          return a.FeeDetial[0].actualValue - b.FeeDetial[0].actualValue;
        });

      // ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      finalResult = sortResult.slice(skip, skip + Number(limit));
    } else if (sortBy === "return") {
      // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏Å‡∏≠‡∏á‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°‡∏ï‡∏≤‡∏° period ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
      sortResult = result
        .map((item) => ({
          ...item,
          performanceValue:
            item.fundPerformanceRisk.find(
              (p) =>
                p.performanceType === performanceType &&
                p.performancePeriod === performancePeriod
            )?.performanceValue || -9999, // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡πà‡∏≤ performance ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        }))
        .sort((a, b) => b.performanceValue - a.performanceValue); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢

      // ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      finalResult = sortResult.slice(skip, skip + Number(limit));

      console.log(finalResult);
    } else if (sortBy === "risk") {
      // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡πà‡∏≤ sd ‡∏Å‡∏≠‡∏á‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°‡∏ï‡∏≤‡∏° period ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
      sortResult = result
        .map((item) => ({
          ...item,
          performanceValue:
            item.fundPerformanceRisk.find(
              (p) =>
                p.performanceType === performanceType &&
                p.performancePeriod === performancePeriod
            )?.performanceValue || 9999, // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        }))
        .sort((a, b) => a.performanceValue - b.performanceValue); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏õ‡∏°‡∏≤‡∏Å

      // ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      finalResult = sortResult.slice(skip, skip + Number(limit));

      console.log(finalResult);
    }

    res.json({
      count: countAllResult,
      message: finalResult,
    });
  } catch (error) {
    next(error);
  }
};

module.exports = fundController;
